{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/regenerator-runtime/runtime.js","src/changelog.json","src/js/sw/index.js","src/js/utils/indexeddouchbag.js","src/js/utils/storage.js"],"names":[],"mappings":"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","file":"sw.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","module.exports=[\n  {\n    \"version\": \"1.9.1\",\n    \"changes\": [\n      \"Fixed bug if 'show original' setting was saved\"\n    ]\n  },\n  {\n    \"version\": \"1.9.0\",\n    \"changes\": [\n      \"Settings are now remembered (thanks Simon Knox)\",\n      \"Fixed drag & drop issue (thanks Simon Knox)\",\n      \"Improved keyboard interaction (thanks Ahmad Shadeed)\"\n    ]\n  },\n  {\n    \"version\": \"1.8.0\",\n    \"changes\": [\n      \"New icon (thanks to Anna Debenham)\"\n    ]\n  },\n  {\n    \"version\": \"1.7.0\",\n    \"changes\": [\n      \"Button to change background color (thanks to Una Kravets)\"\n    ]\n  },\n  {\n    \"version\": \"1.6.1\",\n    \"changes\": [\n      \"HTMLmin broke my stuff\"\n    ]\n  },\n  {\n    \"version\": \"1.6.0\",\n    \"changes\": [\n      \"Copy-to-clipboard button\"\n    ]\n  },\n  {\n    \"version\": \"1.5.1\",\n    \"changes\": [\n      \"Minor CSS change\"\n    ]\n  },\n  {\n    \"version\": \"1.5.0\",\n    \"changes\": [\n      \"Updating SVGO\"\n    ]\n  },\n  {\n    \"version\": \"1.4.3\",\n    \"changes\": [\n      \"Fixing layout in Chrome beta.\"\n    ]\n  },\n  {\n    \"version\": \"1.4.2\",\n    \"changes\": [\n      \"Better cache cleanup.\"\n    ]\n  },\n  {\n    \"version\": \"1.4.1\",\n    \"changes\": [\n      \"Fixes to 'remove hidden items'.\"\n    ]\n  },\n  {\n    \"version\": \"1.4.0\",\n    \"changes\": [\n      \"Updated to SVGO v0.5.1, bringing:\",\n      \"Remove useless defs option.\",\n      \"Round number in number lists.\",\n      \"And loads of fixes!\"\n    ]\n  },\n  {\n    \"version\": \"1.3.0\",\n    \"changes\": [\n      \"Using manifest spec for icons etc.\"\n    ]\n  },\n  {\n    \"version\": \"1.2.4\",\n    \"changes\": [\n      \"Download button now works in IE.\"\n    ]\n  },\n  {\n    \"version\": \"1.2.3\",\n    \"changes\": [\n      \"Fixing bug introduced by browserify.\"\n    ]\n  },\n  {\n    \"version\": \"1.2.2\",\n    \"changes\": [\n      \"Better font loading.\"\n    ]\n  },\n  {\n    \"version\": \"1.2.1\",\n    \"changes\": [\n      \"Lots of performance improvements.\"\n    ]\n  },\n  {\n    \"version\": \"1.2.0\",\n    \"changes\": [\n      \"Code view.\",\n      \"Prettify code option.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.7\",\n    \"changes\": [\n      \"Performance improvements.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.6\",\n    \"changes\": [\n      \"Fix zooming with mouse wheels.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.5\",\n    \"changes\": [\n      \"Removing erroneous scrollbars in Firefox.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.4\",\n    \"changes\": [\n      \"Fixed 'about' link.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.3\",\n    \"changes\": [\n      \"Reverting some painting stuff until I get a handle on the performance.\",\n      \"Using simpler demo SVG.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.2\",\n    \"changes\": [\n      \"Sharper rendering on desktop Chrome & Safari.\",\n      \"Fixed right mouse button issue.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.1\",\n    \"changes\": [\n      \"Reset zooming on image load.\"\n    ]\n  },\n  {\n    \"version\": \"1.1.0\",\n    \"changes\": [\n      \"Click/touch and drag panning.\",\n      \"Pinch zooming.\",\n      \"Wheel zooming.\"\n    ]\n  },\n  {\n    \"version\": \"1.0.4\",\n    \"changes\": [\n      \"Fixing checkered background in IE.\",\n      \"Improving slider touch interaction.\"\n    ]\n  },\n  {\n    \"version\": \"1.0.3\",\n    \"changes\": [\n      \"Fixing SVG output in Firefox.\"\n    ]\n  },\n  {\n    \"version\": \"1.0.2\",\n    \"changes\": [\n      \"Caching fonts for offline use.\",\n      \"Removing tap delay on iPhone/iPad.\",\n      \"Fixing iOS add-to-homescreen.\",\n      \"Better mobile demo image.\"\n    ]\n  },\n  {\n    \"version\": \"1.0.1\",\n    \"changes\": [\n      \"Layout fixes.\",\n      \"Better mobile keyboard handling.\",\n      \"A lighter demo SVG for mobile.\",\n      \"Fixing drag & drop.\"\n    ]\n  },\n  {\n    \"version\": \"1.0.0\",\n    \"changes\": [\n      \"First release.\"\n    ]\n  }\n]\n","require('regenerator-runtime/runtime');\n\nvar storage = require('../utils/storage');\n\n// TODO: use come kind of semver lib?\n// Pattern here is\n// a.b.c\n// a: version-isolated change, don't let both versions run together\n// b: new feature\n// c: bug fix\n// TODO: find a way to do this without bringing the whole log in\nvar version = require('../../changelog.json')[0].version;\nvar cacheVerion = version.split('.')[0];\n\nself.addEventListener('install', function(event) {\n  event.waitUntil((async function () {\n    var activeVersionPromise = storage.get('active-version');\n    var cache = await caches.open('svgomg-static-' + cacheVerion);\n    await cache.addAll([\n      './',\n      'imgs/icon.png',\n      'css/all.css',\n      'js/gzip-worker.js',\n      'js/page.js',\n      'js/prism-worker.js',\n      'js/svgo-worker.js',\n      'changelog.json',\n      'https://fonts.googleapis.com/css?family=Roboto:400,700|Inconsolata'\n    ]);\n\n    var activeVersion = await activeVersionPromise;\n\n    if (!activeVersion || activeVersion.split('.')[0] === version.split('.')[0]) {\n      self.skipWaiting();\n    }\n  })());\n});\n\nvar expectedCaches = [\n  'svgomg-static-' + cacheVerion,\n];\n\nself.addEventListener('activate', function(event) {\n  event.waitUntil((async function () {\n    // remove caches beginning \"svgomg-\" that aren't in\n    // expectedCaches\n    var cacheNames = await caches.keys();\n    for (var cacheName of cacheNames) {\n      if (!/^svgomg-/.test(cacheName)) continue;\n      if (expectedCaches.indexOf(cacheName) == -1) {\n        await caches.delete(cacheName);\n      }\n    }\n\n    await storage.set('active-version', version);\n  })());\n});\n\nasync function handleFontRequest(request) {\n  var match = await caches.match(request);\n  if (match) return match;\n  var response = await fetch(request.clone());\n  var fontCache = await caches.open('svgomg-fonts');\n  fontCache.put(request, response.clone());\n  return response;\n}\n\nself.addEventListener('fetch', function(event) {\n  var url = new URL(event.request.url);\n\n  if (url.host == 'fonts.gstatic.com') {\n    event.respondWith(handleFontRequest(event.request));\n  }\n  else {\n    event.respondWith(\n      caches.match(event.request).then(r => r || fetch(event.request))\n    );\n  }\n});\n","'use strict';\n\nfunction promisifyRequest(obj) {\n  return new Promise(function(resolve, reject) {\n    function onsuccess(event) {\n      resolve(obj.result);\n      unlisten();\n    }\n    function onerror(event) {\n      reject(obj.error);\n      unlisten();\n    }\n    function unlisten() {\n      obj.removeEventListener('complete', onsuccess);\n      obj.removeEventListener('success', onsuccess);\n      obj.removeEventListener('error', onerror);\n      obj.removeEventListener('abort', onerror);\n    }\n    obj.addEventListener('complete', onsuccess);\n    obj.addEventListener('success', onsuccess);\n    obj.addEventListener('error', onerror);\n    obj.addEventListener('abort', onerror);\n  });\n}\n\nclass IndexedDouchebag {\n  constructor(name, version, upgradeCallback) {\n    var request = indexedDB.open(name, version);\n    this.ready = promisifyRequest(request);\n    request.onupgradeneeded = function(event) {\n      upgradeCallback(request.result, event.oldVersion);\n    };\n  }\n\n  transaction(stores, modeOrCallback, callback) {\n    return this.ready.then(function(db) {\n      var mode = 'readonly';\n\n      if (modeOrCallback.apply) {\n        callback = modeOrCallback;\n      }\n      else if (modeOrCallback) {\n        mode = modeOrCallback;\n      }\n\n      var tx = db.transaction(stores, mode);\n      var val = callback(tx, db);\n      var promise = promisifyRequest(tx);\n      var readPromise;\n\n      if (!val) {\n        return promise;\n      }\n\n      if (val[0] && 'result' in val[0]) {\n        readPromise = Promise.all(val.map(promisifyRequest));\n      }\n      else {\n        readPromise = promisifyRequest(val);\n      }\n\n      return promise.then(function() {\n        return readPromise;\n      });\n    });\n  };\n\n  get(store, key) {\n    return this.transaction(store, function(tx) {\n      return tx.objectStore(store).get(key);\n    });\n  };\n\n  put(store, key, value) {\n    return this.transaction(store, 'readwrite', function(tx) {\n      tx.objectStore(store).put(value, key);\n    });\n  };\n\n  delete(store, key) {\n    return this.transaction(store, 'readwrite', function(tx) {\n      tx.objectStore(store).delete(key);\n    });\n  };\n}\n\nmodule.exports = IndexedDouchebag;","var Idb = require('./indexeddouchbag');\nvar idb;\n\n// avoid opening idb until first call\nfunction getIdb() {\n  if (!idb) {\n    idb = new Idb('svgo-keyval', 1, function(db) {\n      db.createObjectStore('keyval');\n    });\n  }\n  return idb;\n}\n\nif (self.indexedDB) {\n  module.exports = {\n    get: key => getIdb().get('keyval', key),\n    set: (key, val) => getIdb().put('keyval', key, val),\n    delete: key => getIdb().delete('keyval', key)\n  };\n}\nelse {\n  module.exports = {\n    get: key => Promise.resolve(localStorage.getItem(key)),\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\n    delete: key => Promise.resolve(localStorage.removeItem(key))\n  };\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}