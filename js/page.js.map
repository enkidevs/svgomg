{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/events/events.js","node_modules/regenerator-runtime/runtime.js","src/js/page/gzip.js","src/js/page/index.js","src/js/page/load-scripts.js","src/js/page/main-controller.js","src/js/page/prism.js","src/js/page/results-cache.js","src/js/page/svg-file.js","src/js/page/svgo.js","src/js/page/ui/bg-fill.js","src/js/page/ui/changelog.js","src/js/page/ui/code-output.js","src/js/page/ui/copy-button.js","src/js/page/ui/download-button.js","src/js/page/ui/enki-code-output.js","src/js/page/ui/enki-topic-code-output.js","src/js/page/ui/file-drop.js","src/js/page/ui/main-menu.js","src/js/page/ui/main-ui.js","src/js/page/ui/material-slider.js","src/js/page/ui/output.js","src/js/page/ui/pan-zoom.js","src/js/page/ui/preloader.js","src/js/page/ui/results-container.js","src/js/page/ui/results.js","src/js/page/ui/ripple.js","src/js/page/ui/settings.js","src/js/page/ui/spinner.js","src/js/page/ui/svg-output.js","src/js/page/ui/toasts.js","src/js/page/ui/view-toggler.js","src/js/page/utils.js","src/js/page/worker-messenger.js","src/js/utils/indexeddouchbag.js","src/js/utils/storage.js"],"names":[],"mappings":"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","file":"page.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","\"use strict\";\n\nclass Gzip extends require('./worker-messenger') {\n  constructor() {\n    super('js/gzip-worker.js');\n  }\n\n  compress(svgData) {\n    return this._requestResponse({\n      data: svgData\n    });\n  }\n}\n\nmodule.exports = Gzip;","'use strict';\nvar loadScripts = require(\"./load-scripts\");\nvar polyfillsNeeded = [];\n\nif (!window.Promise) { // IE :(\n  polyfillsNeeded.push('js/promise-polyfill.js');\n}\n\n// I'm sure user-agent sniffing will be fiiiiine\nif (/(iPhone|iPad);/.test(navigator.userAgent)) {\n  polyfillsNeeded.push('js/fastclick.js');\n}\n\nloadScripts(polyfillsNeeded, function() {\n  require('regenerator-runtime/runtime');\n  require('./utils').trackFocusMethod();\n  new (require('./main-controller'));\n}, function() {\n  console.error(\"Failed to load polyfills\");\n});\n","\"use strict\";\n\n// This is in its own file rather than utils.js because it's used for loading polyfills,\n// and promises, is one of the things that gets polyfilled, hence the callbacks\nmodule.exports = function loadScript(urls, yeyCallback, neyCallback) {\n  var count = urls.length;\n  var errored = false;\n\n  if (urls.length == 0) return yeyCallback();\n\n  urls.forEach(url => {\n    var script = document.createElement('script');\n    script.onload = function() {\n      if (errored) return;\n      if (!--count) yeyCallback();\n    };\n    script.onerror = function() {\n      if (errored) return;\n      neyCallback();\n      errored = true;\n    };\n    script.src = url;\n    document.head.insertBefore(script, document.head.firstChild);\n  });\n};","\"use strict\";\n\nvar utils = require('./utils');\nvar svgo = new (require('./svgo'));\nvar storage = require('../utils/storage');\n\nvar SvgFile = require('./svg-file');\n\nclass MainController {\n  constructor() {\n    this._container = null;\n\n    // ui components\n    this._mainUi = null;\n    this._outputUi = new (require('./ui/output'));\n    this._downloadButtonUi = new (require('./ui/download-button'));\n    this._copyButtonUi = new (require('./ui/copy-button'));\n    this._bgFillUi = new (require('./ui/bg-fill'));\n    this._resultsUi = new (require('./ui/results'));\n    this._settingsUi = new (require('./ui/settings'));\n    this._mainMenuUi = new (require('./ui/main-menu'));\n    this._toastsUi = new (require('./ui/toasts'));\n    this._dropUi = new (require('./ui/file-drop'));\n    this._preloaderUi = new (require('./ui/preloader'));\n    this._changelogUi = new (require('./ui/changelog'))(self.version);\n    this._resultsContainerUi = new (require('./ui/results-container'))(this._resultsUi);\n    this._viewTogglerUi = new (require('./ui/view-toggler'));\n\n    // ui events\n    this._settingsUi.on('change', _ => this._onSettingsChange());\n    this._mainMenuUi.on('svgDataLoad', e => this._onInputChange(e));\n    this._dropUi.on('svgDataLoad', e => this._onInputChange(e));\n    this._mainMenuUi.on('error', ({error}) => this._handleError(error));\n    this._viewTogglerUi.on('change', e => this._onViewSelectionChange(e));\n\n    // state\n    this._inputFilename = 'image.svg';\n    this._inputSvg = null;\n    this._cache = new (require('./results-cache'))(10);\n    this._latestCompressJobId = 0;\n    this._userHasInteracted = false;\n    this._reloading = false;\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('sw.js', {\n        scope: './'\n      }).then(registration => {\n        registration.addEventListener('updatefound', _ => this._onUpdateFound(registration));\n      });\n    }\n\n    // tell the user about the latest update\n    storage.get('last-seen-version').then(lastSeenVersion => {\n      if (lastSeenVersion) {\n        this._changelogUi.showLogFrom(lastSeenVersion);\n      }\n      storage.set('last-seen-version', self.version);\n    });\n\n    utils.domReady.then(_ => {\n      this._container = document.querySelector('.app-output');\n\n      // elements for intro anim\n      this._mainUi = new (require('./ui/main-ui'))(\n        document.querySelector('.toolbar'),\n        document.querySelector('.action-button-container'),\n        this._outputUi.container,\n        this._settingsUi.container\n      );\n\n      const actionContainer = document.querySelector('.action-button-container');\n      const minorActionContainer = document.querySelector('.minor-action-container');\n\n      minorActionContainer.appendChild(this._bgFillUi.container);\n\n      if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n        minorActionContainer.appendChild(this._copyButtonUi.container);\n      }\n\n      actionContainer.appendChild(this._downloadButtonUi.container);\n      document.querySelector('.output').appendChild(this._outputUi.container);\n      this._container.appendChild(this._toastsUi.container);\n      this._container.appendChild(this._dropUi.container);\n      document.querySelector('.menu-extra').appendChild(this._changelogUi.container);\n\n      // load previous settings\n      this._loadSettings();\n\n      // someone managed to hit the preloader, aww\n      if (this._preloaderUi.activated) {\n        this._toastsUi.show(\"Ready now!\", {\n          duration: 3000\n        });\n      }\n\n      /*\n      // for testing\n      async _ => {\n        this._onInputChange({\n          data: await utils.get('test-svgs/car-lite.svg'),\n          filename: 'car.svg'\n        });\n      }();\n      */\n    });\n  }\n\n  _onViewSelectionChange(event) {\n    this._outputUi.set(event.value);\n  }\n\n  _onUpdateFound(registration) {\n    var newWorker = registration.installing;\n\n    registration.installing.addEventListener('statechange', async _ => {\n      if (this._reloading) return;\n\n      // the very first activation!\n      // tell the user stuff works offline\n      if (newWorker.state == 'activated' && !navigator.serviceWorker.controller) {\n        this._toastsUi.show(\"Ready to work offline\", {\n          duration: 5000\n        });\n        return;\n      }\n\n      if (newWorker.state == 'activated' && navigator.serviceWorker.controller) {\n        // if the user hasn't interacted yet, do a sneaky reload\n        if (!this._userHasInteracted) {\n          this._reloading = true;\n          location.reload();\n          return;\n        }\n\n        // otherwise, show the user an alert\n        var toast = this._toastsUi.show(\"Update available\", {\n          buttons: ['reload', 'dismiss']\n        });\n\n        var answer = await toast.answer;\n\n        if (answer == 'reload') {\n          this._reloading = true;\n          location.reload();\n        }\n      }\n    });\n  }\n\n  _onSettingsChange() {\n    var settings = this._settingsUi.getSettings();\n    this._saveSettings(settings);\n    this._compressSvg(settings);\n  }\n\n  async _onInputChange(event) {\n    var settings = this._settingsUi.getSettings();\n    this._userHasInteracted = true;\n\n    try {\n      this._inputSvg = await svgo.load(event.data);\n      this._inputFilename = event.filename;\n    }\n    catch(e) {\n      e.message = \"Load failed: \" + e.message;\n      this._mainMenuUi.stopSpinner();\n      this._handleError(e);\n      return;\n    }\n\n    this._cache.purge();\n\n    var firstItteration = true;\n\n    const compressed = () => {\n      if (firstItteration) {\n        this._outputUi.reset();\n        this._mainUi.activate();\n        this._mainMenuUi.allowHide = true;\n        this._mainMenuUi.hide();\n        firstItteration = false;\n      }\n    }\n\n    this._compressSvg(settings, _ => compressed());\n\n    if (firstItteration) {\n      compressed();\n    }\n  }\n\n  _handleError(e) {\n    this._toastsUi.show(e.message);\n    console.error(e);\n  }\n\n  async _loadSettings() {\n    var settings = await storage.get('settings');\n    if (settings) this._settingsUi.setSettings(settings);\n  }\n\n  _saveSettings(settings) {\n    const copy = Object.assign({}, settings);\n    // doesn't make sense to retain the \"show original\" option\n    delete copy.original;\n    storage.set('settings', copy);\n  }\n\n  async _compressSvg(settings, itterationCallback = function(){}) {\n    var thisJobId = this._latestCompressJobId = Math.random();\n\n    await svgo.abortCurrent();\n\n    if (thisJobId != this._latestCompressJobId) {\n      // while we've been waiting, there's been a newer call\n      // to _compressSvg, we don't need to do anything\n      return;\n    }\n\n    if (settings.original) {\n      this._updateForFile(this._inputSvg, {\n        gzip: settings.gzip\n      });\n      return;\n    }\n\n    var cacheMatch = this._cache.match(settings.fingerprint);\n\n    if (cacheMatch) {\n      this._updateForFile(cacheMatch, {\n        compareToFile: this._inputSvg,\n        gzip: settings.gzip\n      });\n      return;\n    }\n\n    this._downloadButtonUi.working();\n\n    try {\n      var finalResultFile = await svgo.process(settings, resultFile => {\n        itterationCallback(resultFile);\n        this._updateForFile(resultFile, {\n          compareToFile: this._inputSvg,\n          gzip: settings.gzip\n        });\n      });\n      this._cache.add(settings.fingerprint, finalResultFile);\n    }\n    catch(e) {\n      if (e.message != \"abort\") { // TODO: should really be switching on error type\n        e.message = \"Minifying error: \" + e.message;\n        this._handleError(e);\n      }\n    }\n\n    this._downloadButtonUi.done();\n  }\n\n  async _updateForFile(svgFile, {compareToFile, gzip}) {\n    this._outputUi.update(svgFile);\n    this._downloadButtonUi.setDownload(this._inputFilename, svgFile);\n    this._copyButtonUi.setSVG(svgFile);\n\n    this._resultsUi.update({\n      comparisonSize: compareToFile && (await compareToFile.size({ compress: gzip })),\n      size: await svgFile.size({ compress: gzip })\n    });\n  }\n}\n\nmodule.exports = MainController;\n","\"use strict\";\n\nclass Prism extends require('./worker-messenger') {\n  constructor() {\n    super('js/prism-worker.js');\n  }\n\n  highlight(svgData) {\n    return this._requestResponse({\n      data: svgData\n    });\n  }\n}\n\nmodule.exports = Prism;","\"use strict\";\n\nclass ResultsCache {\n  constructor(size) {\n    this._size = size;\n    this.purge();\n  }\n\n  purge() {\n    this._fingerprints = [];\n    this._files = [];\n    this._index = 0;\n  }\n\n  add(fingerprint, file) {\n    var oldItem = this._files[this._index];\n\n    if (oldItem) {\n      // gc blob url\n      oldItem.release();\n    }\n\n    this._fingerprints[this._index] = fingerprint;\n    this._files[this._index] = file;\n\n    this._index = (this._index + 1) % this._size;\n  }\n\n  match(fingerprint) {\n    return this._files[this._fingerprints.indexOf(fingerprint)];\n  }\n}\n\nmodule.exports = ResultsCache;","\"use strict\";\n\nvar gzip = new (require('./gzip'));\n\nclass SvgFile {\n  constructor(text, width, height) {\n    this.text = text;\n    this._compressedSize = null;\n    this._url = '';\n    this._blob = null;\n    this.width = width;\n    this.height = height;\n  }\n\n  async size({ compress }) {\n    if (!compress) {\n      return this.text.length;\n    }\n\n    if (!this._compressedSize) {\n      this._compressedSize = gzip.compress(this.text)\n        .then(r => r.byteLength);\n    }\n\n    return this._compressedSize;\n  }\n\n  _create() {\n    // IE GCs blobs once they're out of reference, even if they\n    // have an object url, so we have to keep in in reference.\n    this._blob = new Blob([this.text], {type: \"image/svg+xml\"});\n    this._url = URL.createObjectURL(this._blob);\n  }\n\n  get blob() {\n    if (!this._blob) this._create();\n    return this._blob;\n  }\n\n  get url() {\n    if (!this._url) this._create();\n    return this._url;\n  }\n\n  release() {\n    if (!this._url) {\n      return;\n    }\n\n    this._blob = null;\n    URL.revokeObjectURL(this._url);\n  }\n}\n\nmodule.exports = SvgFile;","\"use strict\";\n\nvar SvgFile = require('./svg-file');\n\nclass Svgo extends require('./worker-messenger') {\n  constructor() {\n    super('js/svgo-worker.js');\n    this._multiPass = false;\n    this._abortOnNextItter = false;\n    this._currentJob = Promise.resolve();\n  }\n\n  load(svgText) {\n    return this._requestResponse({\n      action: 'load',\n      data: svgText\n    }).then(({width, height}) => {\n      return new SvgFile(svgText, width, height);\n    });\n  }\n\n  process(settings, itterationCallback) {\n    return this._currentJob = this.abortCurrent().then(async _ => {\n      this._abortOnNextItter = false;\n\n      var result = await this._requestResponse({\n        action: 'process',\n        settings\n      });\n\n      var resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\n\n      itterationCallback(resultFile);\n\n      if (settings.multipass) {\n        while (result = await this.nextPass()) {\n          if (this._abortOnNextItter) {\n            throw Error('abort');\n          }\n          resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\n          itterationCallback(resultFile);\n        }\n      }\n\n      // return final result\n      return resultFile;\n    });\n  }\n\n  nextPass() {\n    return this._requestResponse({\n      action: 'nextPass'\n    });\n  }\n\n  async abortCurrent() {\n    this._abortOnNextItter = true;\n\n    try {\n      await this._currentJob;\n    } catch(e){}\n  }\n}\n\nmodule.exports = Svgo;","var utils = require('../utils');\nvar Ripple = require('./ripple');\n\nclass BgFillButton {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div role=\"button\" tabindex=\"0\" class=\"fillAB minor-floating-action-button\">' +\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          '<title>Background Fill</title>' +\n          '<path d=\"M21.143 9.667c-.733-1.392-1.914-3.05-3.617-4.753-2.977-2.978-5.478-3.914-6.785-3.914-.414 0-.708.094-.86.246l-1.361 1.36c-1.899-.236-3.42.106-4.294.983-.876.875-1.164 2.159-.792 3.523.492 1.806 2.305 4.049 5.905 5.375.038.323.157.638.405.885.588.588 1.535.586 2.121 0s.588-1.533.002-2.119c-.588-.587-1.537-.588-2.123-.001l-.17.256c-2.031-.765-3.395-1.828-4.232-2.9l3.879-3.875c.496 2.73 6.432 8.676 9.178 9.178l-7.115 7.107c-.234.153-2.798-.316-6.156-3.675-3.393-3.393-3.175-5.271-3.027-5.498l1.859-1.856c-.439-.359-.925-1.103-1.141-1.689l-2.134 2.131c-.445.446-.685 1.064-.685 1.82 0 1.634 1.121 3.915 3.713 6.506 2.764 2.764 5.58 4.243 7.432 4.243.648 0 1.18-.195 1.547-.562l8.086-8.078c.91.874-.778 3.538-.778 4.648 0 1.104.896 1.999 2 1.999 1.105 0 2-.896 2-2 0-3.184-1.425-6.81-2.857-9.34zm-16.209-5.371c.527-.53 1.471-.791 2.656-.761l-3.209 3.206c-.236-.978-.049-1.845.553-2.445zm9.292 4.079l-.03-.029c-1.292-1.292-3.803-4.356-3.096-5.063.715-.715 3.488 1.521 5.062 3.096.862.862 2.088 2.247 2.937 3.458-1.717-1.074-3.491-1.469-4.873-1.462z\"/>' +\n        '</svg>' +\n      '</div>' +\n    '');\n\n    this._ripple = new Ripple();\n    this.container.appendChild(this._ripple.container);\n\n    this.container.addEventListener('click', event => this._onClick(event));\n  }\n\n  _onClick(event) {\n    // event adds a background color\n    if (this.container.classList.contains('active')) {\n      this.container.classList.remove('active');\n      this.setColor('transparent');\n    } else {\n      this.container.classList.add('active');\n      this.setColor('#f444fe');\n    }\n    this._ripple.animate();\n  }\n\n  setColor(color) {\n    document.documentElement.style.backgroundColor = color;\n  }\n}\n\nmodule.exports = BgFillButton;\n","var utils = require('../utils');\n\nclass Changelog {\n  constructor(loadedVersion) {\n    this.container = utils.strToEl('<section class=\"changelog\"></section>');\n    this._loadedVersion = loadedVersion;\n  }\n\n  async showLogFrom(lastLoadedVersion) {\n    if (lastLoadedVersion == this._loadedVersion) return;\n    var changelog = await utils.get('changelog.json').then(JSON.parse);\n    var startIndex = 0;\n    var endIndex = 0;\n    \n    for (var i = 0; i < changelog.length; i++) {\n      let entry = changelog[i];\n\n      if (entry.version === this._loadedVersion) {\n        startIndex = i;\n      }\n      else if (entry.version === lastLoadedVersion) {\n        break;\n      }\n      endIndex = i + 1;\n    }\n\n    var changeLis = changelog.slice(startIndex, endIndex).reduce((arr, entry) => {\n      return arr.concat(entry.changes);\n    }, []).map(function(change) {\n      return utils.escapeHtmlTag`<li>${change}</li>`;\n    });\n\n    this.container.appendChild(utils.strToEl('<h1>Updated!</h1>'));\n    this.container.appendChild(utils.strToEl(\n      '<ul>' +\n        changeLis.join('') +\n      '</ul>' +\n    ''));\n\n    await utils.domReady;\n    utils.transitionToClass(this.container);\n  }\n}\n\nmodule.exports = Changelog;","var utils = require('../utils');\nvar prism = new (require('../prism'));\n\nclass CodeOutput {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"code-output\">' +\n        '<pre><code></code></pre>' +\n      '</div>' +\n    '');\n    this._codeEl = this.container.querySelector('code');\n  }\n\n  async setSvg(svgFile) {\n    this._codeEl.innerHTML = await prism.highlight(svgFile.text);\n  }\n\n  reset() {\n    this._codeEl.innerHTML = '';\n  }\n}\n\nmodule.exports = CodeOutput;","var utils = require('../utils');\nvar Ripple = require('./ripple');\n\nclass CopyButton {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div role=\"button\" tabindex=\"0\" class=\"minor-floating-action-button\">' +\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          '<title>Copy</title>' +\n          '<path d=\"M16 1H4C3 1 2 2 2 3v14h2V3h12V1zm3 4H8C7 5 6 6 6 7v14c0 1 1 2 2 2h11c1 0 2-1 2-2V7c0-1-1-2-2-2zm0 16H8V7h11v14z\"/>' +\n        '</svg>' +\n      '</div>' +\n    '');\n\n    this._ripple = new Ripple();\n    this.container.appendChild(this._ripple.container);\n\n    this._svgFile = null;\n    this._pre = document.createElement('pre');\n\n    this.container.addEventListener('click', event => this._onClick(event));\n  }\n\n  _onClick(event) {\n    this._pre.textContent = '![alt description](' + encodeURIComponent(this._svgFile.text).replace(/\\(/g, '%28')\n      .replace(/\\)/g, '%29') + ')';\n    document.body.appendChild(this._pre);\n    getSelection().removeAllRanges();\n    var range = document.createRange();\n    range.selectNode(this._pre);\n    window.getSelection().addRange(range);\n    document.execCommand('copy');\n    getSelection().removeAllRanges();\n    document.body.removeChild(this._pre);\n    this._ripple.animate();\n  }\n\n  setSVG(svgFile) {\n    this._svgFile = svgFile;\n  }\n}\n\nmodule.exports = CopyButton;\n","var utils = require('../utils');\nvar Spinner = require('./spinner');\n\nclass DownloadButton {\n  constructor() {\n    this.container = utils.strToEl(\n      '<a href=\"./\" class=\"floating-action-button\">' +\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\n          '<title>Download output</title>' +\n          '<path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"/>' +\n        '</svg>' +\n      '</a>' +\n    '');\n    this._spinner = new Spinner();\n    this.container.appendChild(this._spinner.container);\n    this._svgFile = null;\n\n    // IE compat\n    if ('msSaveBlob' in navigator) {\n      this.container.addEventListener('click', event => {\n        event.preventDefault();\n        navigator.msSaveBlob(this._svgFile.blob, this.container.download);\n      });\n    }\n  }\n\n  setDownload(filename, svgFile) {\n    this.container.download = filename;\n    this.container.href = svgFile.url;\n\n    // for IE compat\n    this._svgFile = svgFile;\n  }\n\n  working() {\n    this._spinner.show(500);\n  }\n\n  done() {\n    this._spinner.hide();\n  }\n}\n\nmodule.exports = DownloadButton;","var utils = require('../utils');\n\nclass CodeOutput {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"code-output\">' +\n        '<pre><code></code></pre>' +\n      '</div>' +\n    '');\n    this._codeEl = this.container.querySelector('code');\n  }\n\n  async setSvg(svgFile) {\n    console.log(svgFile)\n    this._codeEl.innerHTML = '![alt description](' + encodeURIComponent(svgFile.text).replace(/\\(/g, '%28')\n      .replace(/\\)/g, '%29') + ')';\n  }\n\n  reset() {\n    this._codeEl.innerHTML = '';\n  }\n}\n\nmodule.exports = CodeOutput;\n","var utils = require('../utils');\n\nfunction viewBox (svgStr) {\n  const viewBoxRegex = /<svg .*?viewBox=[\"'](-?[\\d\\.]+[, ]+-?[\\d\\.]+[, ][\\d\\.]+[, ][\\d\\.]+)[\"']/\n  const matches = svgStr.match(viewBoxRegex)\n  return matches && matches.length >= 2 ? matches[1] : null;\n}\n\nclass CodeOutput {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"code-output\">' +\n        '<pre><code></code></pre>' +\n      '</div>' +\n    '');\n    this._codeEl = this.container.querySelector('code');\n  }\n\n  async setSvg(svgFile) {\n    this._codeEl.innerText = '[' + viewBox(svgFile.text) + '] ' + svgFile.text.replace(/<svg.*?>/, '').replace(/\\n/g, '').replace(/<\\/svg.*?>/, '');\n  }\n\n  reset() {\n    this._codeEl.innerHTML = '';\n  }\n}\n\nmodule.exports = CodeOutput;\n","var utils = require('../utils');\n\nclass FileDrop extends (require('events').EventEmitter) {\n  constructor() {\n    super();\n    this.container = utils.strToEl(\n      '<div class=\"drop-overlay\">Drop it!</div>' +\n    '');\n\n    // drag events are horrid\n    this._activeEnters = 0;\n    this._currentEnteredElement = null;\n\n    utils.domReady.then(_ => {\n      document.addEventListener('dragover', event => event.preventDefault());\n      document.addEventListener('dragenter', event => this._onDragEnter(event));\n      document.addEventListener('dragleave', event => this._onDragLeave(event));\n      document.addEventListener('drop', event => this._onDrop(event));\n    });\n  }\n\n  _onDragEnter(event) {\n    // firefox double-fires on window enter, this works around it\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1124645\n    if (this._currentEnteredElement == event.target) return;\n    this._currentEnteredElement = event.target;\n\n    if (!this._activeEnters++) {\n      utils.transitionToClass(this.container);\n    }\n  }\n\n  _onDragLeave(event) {\n    this._currentEnteredElement = null;\n\n    if (!--this._activeEnters) {\n      utils.transitionFromClass(this.container);\n    }\n  }\n\n  async _onDrop(event) {\n    event.preventDefault();\n\n    this._activeEnters = 0;\n    utils.transitionFromClass(this.container);\n    var file = event.dataTransfer.files[0];\n\n    this.emit('svgDataLoad', {\n      data: await utils.readFileAsText(file),\n      filename: file.name\n    });\n  }\n}\n\nmodule.exports = FileDrop;\n","\"use strict\";\n\nvar utils = require('../utils');\nvar Spinner = require('./spinner');\n\nclass MainMenu extends (require('events').EventEmitter) {\n  constructor() {\n    super();\n\n    this.allowHide = false;\n    this._spinner = new Spinner();\n\n    utils.domReady.then(_ => {\n      this.container = document.querySelector('.main-menu');\n      this._selectFileInput = document.querySelector('.select-file-input');\n      this._pasteInput = document.querySelector('.paste-input');\n      this._loadDemoBtn = document.querySelector('.load-demo');\n      this._selectFileBtn = document.querySelector('.select-file');\n      this._pasteLabel = document.querySelector('.menu-input');\n      this._overlay = this.container.querySelector('.overlay');\n      this._menu = this.container.querySelector('.menu');\n\n      document.querySelector('.menu-btn')\n        .addEventListener('click', e => this._onMenuButtonClick(e));\n\n      this._overlay.addEventListener('click', e => this._onOverlayClick(e));\n\n      this._selectFileBtn.addEventListener('click', e => this._onSelectFileClick(e));\n      this._loadDemoBtn.addEventListener('click', e => this._onLoadDemoClick(e));\n      this._selectFileInput.addEventListener('change', e => this._onFileInputChange(e));\n      this._pasteInput.addEventListener('input', e => this._onTextInputChange(e));\n    });\n  }\n\n  show() {\n    this.container.classList.remove('hidden');\n    utils.transitionFromClass(this._overlay, 'hidden');\n    utils.transitionFromClass(this._menu, 'hidden');\n  }\n\n  hide() {\n    if (!this.allowHide) {\n      return;\n    }\n    this.stopSpinner();\n    this.container.classList.add('hidden');\n    utils.transitionToClass(this._overlay, 'hidden');\n    utils.transitionToClass(this._menu, 'hidden');\n  }\n\n  stopSpinner() {\n    this._spinner.hide();\n  }\n\n  _onOverlayClick(event) {\n    event.preventDefault();\n    this.hide();\n  }\n\n  _onMenuButtonClick(event) {\n    event.preventDefault();\n    this.show();\n  }\n\n  _onTextInputChange(event) {\n    var val = this._pasteInput.value.trim();\n\n    if (val.indexOf('</svg>') != -1) {\n      this._pasteInput.value = '';\n      this._pasteInput.blur();\n\n      this._pasteLabel.appendChild(this._spinner.container);\n      this._spinner.show();\n\n      this.emit('svgDataLoad', {\n        data: val,\n        filename: 'image.svg'\n      });\n    }\n  }\n\n  _onSelectFileClick(event) {\n    event.preventDefault();\n    event.target.blur();\n    this._selectFileInput.click();\n  }\n\n  async _onFileInputChange(event) {\n    var file = this._selectFileInput.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    this._selectFileBtn.appendChild(this._spinner.container);\n    this._spinner.show();\n\n    this.emit('svgDataLoad', {\n      data: await utils.readFileAsText(file),\n      filename: file.name\n    });\n  }\n\n  async _onLoadDemoClick(event) {\n    event.preventDefault();\n    event.target.blur();\n    this._loadDemoBtn.appendChild(this._spinner.container);\n    this._spinner.show();\n\n    try {\n      this.emit('svgDataLoad', {\n        data: await utils.get('test-svgs/car-lite.svg'),\n        filename: 'car.svg'\n      });\n    }\n    catch (error) {\n      this.stopSpinner();\n\n      var e;\n\n      if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n        e = Error(\"Demo not available offline\");\n      }\n      else {\n        e = Error(\"Couldn't fetch demo SVG\");\n      }\n\n      this.emit('error', {\n        error: e\n      });\n    }\n  }\n}\n\nmodule.exports = MainMenu;","var utils = require('../utils');\n\nclass MainUi {\n  constructor(...elements) {\n    this._activated = false;\n    this._toActivate = elements;\n  }\n\n  activate() {\n    if (this._activated) return;\n    this._activated = true;\n\n    return Promise.all(\n      this._toActivate.map(el => utils.transitionToClass(el))\n    );\n  }\n}\n\nmodule.exports = MainUi;","var utils = require('../utils');\n\nclass MaterialSlider {\n  constructor(rangeEl) {\n    this.container = utils.strToEl(`\n      <div class=\"material-slider\">\n        <div class=\"track\">\n          <div class=\"track-on\"></div>\n          <div class=\"handle\">\n            <div class=\"arrow\"></div>\n            <div class=\"val\"></div>\n          </div>\n        </div>\n      </div>\n    `);\n\n    this.range = rangeEl;\n    this._handle = this.container.querySelector('.handle');\n    this._trackOn = this.container.querySelector('.track-on');\n    this._val = this.container.querySelector('.val');\n\n    rangeEl.parentNode.insertBefore(this.container, rangeEl);\n    this.container.insertBefore(rangeEl, this.container.firstChild);\n\n    // events\n    // thanks IE\n    var rangeChangeEvent = utils.isIe ? 'change' : 'input';\n\n    rangeEl.addEventListener(rangeChangeEvent, e => this._onInputChange(e));\n    this.range.addEventListener('mousedown', e => this._onRangeMouseDown(e));\n    this.range.addEventListener('touchstart', e => this._onRangeTouchStart(e));\n    this.range.addEventListener('touchend', e => this._onRangeTouchEnd(e));\n\n    this._setPosition();\n  }\n\n  _onRangeTouchStart(event) {\n    this.range.focus();\n  }\n\n  _onRangeTouchEnd(event) {\n    this.range.blur();\n  }\n\n  _onRangeMouseDown(event) {\n    this.range.classList.add('active');\n\n    var upListener = e => {\n      // IE requires me to do this. Pah.\n      requestAnimationFrame(_ => {\n        this.range.blur();\n      })\n      this.range.classList.remove('active');\n      document.removeEventListener('mouseup', upListener);\n    }\n    document.addEventListener('mouseup', upListener);\n  }\n\n  set value(newVal) {\n    this.range.value = newVal;\n    this._update();\n  }\n\n  _onInputChange() {\n    this._update();\n  }\n\n  _update() {\n    requestAnimationFrame(_ => this._setPosition());\n  }\n\n  _setPosition() {\n    var { min, max, value } = this.range;\n    var percent = (Number(value) - min) / (max - min);\n    this._trackOn.style.width = \n      this._handle.style.left = percent * 100 + \"%\";\n\n    this._val.textContent = value;\n  }\n}\n\nmodule.exports = MaterialSlider;","var utils = require('../utils');\n\nclass Output {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"output-switcher\"></div>' +\n    '');\n\n    this._types = {\n      image: new (require('./svg-output')),\n      code: new (require('./code-output')),\n      enki_code: new (require('./enki-code-output')),\n      enki_topic_code: new (require('./enki-topic-code-output'))\n    };\n\n    this._svgFile = null;\n    this._switchQueue = Promise.resolve();\n    this.set('image', {noAnimate: true});\n  }\n\n  update(svgFile) {\n    this._svgFile = svgFile;\n    return this._types[this._activeType].setSvg(svgFile);\n  }\n\n  reset() {\n    this._types[this._activeType].reset();\n  }\n\n  set(type, {\n    noAnimate = false\n  }={}) {\n    return this._switchQueue = this._switchQueue.then(async _ => {\n      var toRemove;\n      var toAdd;\n\n      if (this._activeType) {\n        toRemove = this._types[this._activeType].container;\n      }\n\n      this._activeType = type;\n      toAdd = this._types[this._activeType].container;\n      this.container.appendChild(toAdd);\n\n      if (this._svgFile) await this.update(this._svgFile);\n\n      if (noAnimate) {\n        toAdd.classList.add('active');\n        if (toRemove) toRemove.classList.remove('active');\n      }\n      else {\n        let transitions = [\n          utils.transitionToClass(toAdd)\n        ];\n\n        if (toRemove) transitions.push(utils.transitionFromClass(toRemove));\n\n        await Promise.all(transitions);\n      }\n\n      if (toRemove) {\n        this.container.removeChild(toRemove);\n      }\n    })\n  }\n}\n\nmodule.exports = Output;\n","var utils = require('../utils');\n\nfunction getXY(obj) {\n  return {\n    x: obj.pageX,\n    y: obj.pageY\n  };\n}\n\nfunction touchDistance(touch1, touch2) {\n  var dx = Math.abs(touch2.x - touch1.x);\n  var dy = Math.abs(touch2.y - touch1.y);\n  return Math.sqrt(dx*dx + dy*dy);\n}\n\nfunction getMidpoint(point1, point2) {\n  return {\n    x: (point1.x + point2.x) / 2,\n    y: (point1.y + point2.y) / 2\n  };\n}\n\nfunction getPoints(event) {\n  if (event.touches) {\n    return Array.prototype.map.call(event.touches, getXY);\n  }\n  else {\n    return [getXY(event)];\n  }\n}\n\nclass PanZoom {\n  constructor(target, {\n    eventArea = target,\n    shouldCaptureFunc = function(el){ return true; }\n  }={}) {\n    this._target = target;\n    this._shouldCaptureFunc = shouldCaptureFunc;\n    this._dx = 0;\n    this._dy = 0;\n    this._scale = 1;\n    this._active = 0;\n    this._lastPoints = [];\n\n    // bind\n    [\n      '_onPointerDown',\n      '_onPointerMove',\n      '_onPointerUp'\n    ].forEach(funcName => {\n      this[funcName] = this[funcName].bind(this);\n    })\n\n    // bound events\n    eventArea.addEventListener('mousedown', this._onPointerDown);\n    eventArea.addEventListener('touchstart', this._onPointerDown);\n\n    // unbonud\n    eventArea.addEventListener('wheel', e => this._onWheel(e));\n  }\n\n  reset() {\n    this._dx = 0;\n    this._dy = 0;\n    this._scale = 1;\n    this._update();\n  }\n\n  _onWheel(event) {\n    if (!this._shouldCaptureFunc(event.target)) return;\n    event.preventDefault();\n\n    var boundingRect = this._target.getBoundingClientRect();\n    var delta = event.deltaY;\n\n    if (event.deltaMode === 1) { // 1 is \"lines\", 0 is \"pixels\"\n      // Firefox uses \"lines\" when mouse is connected\n      delta *= 15;\n    }\n\n    // stop mouse wheel producing huge values\n    delta = Math.max(Math.min(delta, 60), -60);\n\n    var scaleDiff = (delta / 300) + 1;\n\n    // avoid to-small values\n    if (this._scale * scaleDiff < 0.05) return;\n\n    this._scale *= scaleDiff;\n    this._dx -= (event.pageX - boundingRect.left) * (scaleDiff - 1);\n    this._dy -= (event.pageY - boundingRect.top) * (scaleDiff - 1);\n    this._update();\n  }\n\n  _onFirstPointerDown(event) {\n    document.addEventListener('mousemove', this._onPointerMove);\n    document.addEventListener('mouseup', this._onPointerUp);\n    document.addEventListener('touchmove', this._onPointerMove);\n    document.addEventListener('touchend', this._onPointerUp);\n  }\n\n  _onPointerDown(event) {\n    if (event.type == 'mousedown' && event.which != 1) return;\n    if (!this._shouldCaptureFunc(event.target)) return;\n    event.preventDefault();\n\n    this._lastPoints = getPoints(event);\n    this._active++;\n\n    if (this._active === 1) {\n      this._onFirstPointerDown(event);\n    }\n  }\n\n  _onPointerMove(event) {\n    event.preventDefault();\n    var points = getPoints(event);\n    var averagePoint = points.reduce(getMidpoint);\n    var averageLastPoint = this._lastPoints.reduce(getMidpoint);\n    var boundingRect = this._target.getBoundingClientRect();\n\n    this._dx += averagePoint.x - averageLastPoint.x;\n    this._dy += averagePoint.y - averageLastPoint.y;\n\n    if (points[1]) {\n      var scaleDiff = touchDistance(points[0], points[1]) / touchDistance(this._lastPoints[0], this._lastPoints[1]);\n      this._scale *= scaleDiff;\n      this._dx -= (averagePoint.x - boundingRect.left) * (scaleDiff - 1);\n      this._dy -= (averagePoint.y - boundingRect.top) * (scaleDiff - 1);\n    }\n\n    this._update();\n    this._lastPoints = points;\n  }\n\n  _update() {\n    this._target.style.WebkitTransform = this._target.style.transform\n      = 'translate3d(' + this._dx + 'px, ' + this._dy + 'px, 0) scale(' + this._scale + ')';\n  }\n\n  _onPointerUp(event) {\n    event.preventDefault();\n    this._active--;\n    this._lastPoints.pop();\n\n    if (this._active) {\n      this._lastPoints = getPoints(event);\n      return;\n    }\n\n    document.removeEventListener('mousemove', this._onPointerMove);\n    document.removeEventListener('mouseup', this._onPointerUp);\n    document.removeEventListener('touchmove', this._onPointerMove);\n    document.removeEventListener('touchend', this._onPointerUp);\n  }\n}\n\nmodule.exports = PanZoom;\n","var utils = require('../utils');\n\nclass Preloader {\n  constructor() {\n    utils.domReady.then(_ => {\n      this.container = document.querySelector('.preloader');\n      this.activated = this.container.classList.contains('active');\n      this.hide();\n    });\n  }\n\n  async hide() {\n    await utils.transitionFromClass(this.container, 'active');\n    this.container.style.display = 'none';\n  }\n}\n\nmodule.exports = Preloader;","var utils = require('../utils');\n\nclass ResultsContainer {\n  constructor(results) {\n    this._results = results;\n\n    utils.domReady.then(_ => {\n      this._mobileContainer = document.querySelector('.results-container-mobile');\n      this._container = document.querySelector('.results-container');\n      this._query = matchMedia('(min-width: 640px)');\n\n      this._query.addListener(_ => this._positionResults());\n      this._positionResults();\n    });\n  }\n\n  _positionResults() {\n    if (this._query.matches) {\n      this._container.appendChild(this._results.container);\n    }\n    else {\n      this._mobileContainer.appendChild(this._results.container);\n    }\n  }\n}\n\nmodule.exports = ResultsContainer;","var utils = require('../utils');\n\nfunction round(num, places) {\n  var mult = Math.pow(10, places);\n  return Math.floor(Math.round(num * mult)) / mult;\n}\n\nfunction humanSize(bytes) { // TODO: I'm sure there's a better version of this\n  if (bytes < 1024) {\n    return bytes + ' bytes';\n  }\n  else {\n    return round(bytes / 1024, 2) + 'k';\n  }\n}\n\nclass Results {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"results\">' +\n        '<span class=\"size\"></span>' +\n        '<span class=\"diff\"></span>' +\n      '</div>' +\n    '');\n    this._sizeEl = this.container.querySelector('.size');\n    this._diffEl = this.container.querySelector('.diff');\n  }\n\n  update({size, comparisonSize}) {\n    this._sizeEl.textContent = humanSize(size);\n    \n    // just displaying a single size?\n    if (!comparisonSize) {\n      this._diffEl.textContent = '';\n      return;\n    }\n    else if (size == comparisonSize) {\n      this._diffEl.textContent = ' - no change';\n    }\n    else if (size > comparisonSize) {\n      this._diffEl.textContent = ' - ' + round(size / comparisonSize * 100 - 100, 2) + '% increase';\n    }\n    else {\n      this._diffEl.textContent = ' - ' + round(100 - size / comparisonSize * 100, 2) + '% saving';\n    }\n  }\n}\n\nmodule.exports = Results;","var utils = require('../utils');\n\nclass Ripple {\n  constructor() {\n    this.container = utils.strToEl('<div class=\"ripple\"></div>');\n  }\n\n  animate() {\n    this.container.classList.remove('animate');\n    this.container.offsetLeft;\n    this.container.classList.add('animate');\n  }\n}\n\nmodule.exports = Ripple;\n","\"use strict\"\n\nvar utils = require('../utils');\nvar Slider = require('./material-slider');\n\nclass Settings extends (require('events').EventEmitter) {\n  constructor() {\n    super();\n\n    this._throttleTimeout = null;\n\n    utils.domReady.then(_ => {\n      this._pluginInputs = utils.toArray(\n        document.querySelectorAll('.settings .plugins input')\n      );\n      this._globalInputs = utils.toArray(\n        document.querySelectorAll('.settings .global input')\n      );\n\n      // map real range elements to Slider instances\n      this._sliderMap = new WeakMap();\n\n      // enhance ranges\n      utils.toArray(\n        document.querySelectorAll('.settings input[type=range]')\n      ).forEach(el => this._sliderMap.set(el, new Slider(el)));\n\n      this.container = document.querySelector('.settings');\n      this._scroller = document.querySelector('.settings-scroller');\n\n      this.container.addEventListener('change', e => this._onChange(e));\n      this.container.addEventListener('input', e => this._onChange(e));\n      this._scroller.addEventListener('wheel', e => this._onMouseWheel(e));\n\n      // Stop double-tap text selection.\n      // This stops all text selection which is kinda sad.\n      // I think this code will bite me.\n      this._scroller.addEventListener('mousedown', e => {\n        if (utils.closest(e.target, 'input[type=range]')) return;\n        e.preventDefault();\n      });\n    });\n  }\n\n  _onMouseWheel(event) {\n    // Prevents bounce effect on desktop.\n    // Firefox uses DELTA_LINE on a mouse wheel, ignore it\n    if (!event.deltaMode) { // 0 is \"pixels\"\n      event.preventDefault();\n      event.currentTarget.scrollTop += event.deltaY;\n    }\n  }\n\n  _onChange(event) {\n    // IE fires the change event rather than input for ranges\n    if (!utils.isIe && event.type == 'change' && event.target.type == 'range') {\n      // for ranges, the change event is just a dupe of the\n      // final input event\n      return;\n    }\n\n    clearTimeout(this._throttleTimeout);\n\n    // throttle range\n    if (event.target.type == 'range') {\n      this._throttleTimeout = setTimeout(_ => this.emit('change'), 150);\n    }\n    else {\n      this.emit('change');\n    }\n  }\n\n  setSettings(settings) {\n    this._globalInputs.forEach(inputEl => {\n      if (inputEl.type == 'checkbox') {\n        inputEl.checked = settings[inputEl.name];\n      }\n      else if (inputEl.type == 'range') {\n        this._sliderMap.get(inputEl).value = settings[inputEl.name];\n      }\n    });\n\n    this._pluginInputs.forEach(inputEl => {\n      inputEl.checked = settings.plugins[inputEl.name];\n    });\n  }\n\n  getSettings() {\n    // fingerprint is used for cache lookups\n    var fingerprint = [];\n\n    var output = {\n      plugins: {}\n    };\n\n    this._globalInputs.forEach(function(inputEl) {\n      if (inputEl.name != 'gzip' && inputEl.name != 'original') {\n        if (inputEl.type == 'checkbox') {\n          fingerprint.push(Number(inputEl.checked));\n        }\n        else {\n          fingerprint.push('|' + inputEl.value + '|');\n        }\n      }\n\n      if (inputEl.type == 'checkbox') {\n        output[inputEl.name] = inputEl.checked;\n      }\n      else {\n        output[inputEl.name] = inputEl.value;\n      }\n    });\n\n    this._pluginInputs.forEach(function(inputEl) {\n      fingerprint.push(Number(inputEl.checked));\n      output.plugins[inputEl.name] = inputEl.checked;\n    });\n\n    output.fingerprint = fingerprint.join();\n\n    return output;\n  }\n}\n\nmodule.exports = Settings;\n","var utils = require('../utils');\n\nclass Spinner {\n  constructor() {\n    this.container = utils.strToEl(\n      '<div class=\"spinner\">' +\n        '<div class=\"spinner-container\">' +\n          '<div class=\"spinner-layer\">' +\n            '<div class=\"circle-clipper left\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"gap-patch\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"circle-clipper right\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n          '</div>' +\n        '</div>' +\n      '</div>' +\n    '');\n\n    this._showTimeout = null;\n    this.container.style.display = 'none';\n\n    var animEndListener = event => {\n      if (event.target == this.container) {\n        this.container.style.display = 'none';\n      }\n    };\n\n    this.container.addEventListener('webkitAnimationEnd', animEndListener);\n    this.container.addEventListener('animationend', animEndListener);\n  }\n\n  show(delay = 300) {\n    clearTimeout(this._showTimeout);\n    this.container.style.display = 'none';\n    this.container.classList.remove('cooldown');\n    this._showTimeout = setTimeout(_ => {\n      this.container.style.display = '';\n    }, delay);\n  }\n\n  hide() {\n    clearTimeout(this._showTimeout);\n    this.container.classList.add('cooldown');\n  }\n}\n\nmodule.exports = Spinner;","var utils = require('../utils');\nvar PanZoom = require('./pan-zoom');\n\nclass SvgOutput {\n  constructor() {\n    // IE doesn't support datauris or blob urls in iframe :(\n    // TODO: feature detect this & report bug\n    var frameHtml = utils.isIe ?\n      '<img class=\"svg-frame\">' :\n      '<iframe class=\"svg-frame\" sandbox=\"allow-scripts\"></iframe>';\n\n    this.container = utils.strToEl(\n      '<div class=\"svg-output\">' +\n        '<div class=\"svg-container\">' +\n          frameHtml +\n        '</div>' +\n        // Stop touches going into the iframe.\n        // pointer-events + touch + iframe doesn't work in Chrome :(\n        '<div class=\"svg-clickjacker\"></div>' +\n      '</div>' +\n    '');\n\n\n    this._svgFrame = this.container.querySelector('.svg-frame');\n    this._svgFrame.scrolling = 'no';\n\n    this._svgContainer = this.container.querySelector('.svg-container');\n\n    utils.domReady.then(_ => {\n      this._panZoom = new PanZoom(this._svgContainer, {\n        eventArea: this.container\n      });\n    });\n  }\n\n  setSvg(svgFile) {\n    // I would rather use blob urls, but they don't work in Firefox\n    // All the internal refs break.\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1125667\n    var nextLoad = this._nextLoadPromise();\n    this._svgFrame.src = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgFile.text);\n    this._svgFrame.width = svgFile.width;\n    this._svgFrame.height = svgFile.height;\n    return nextLoad;\n  }\n\n  reset() {\n    this._svgFrame.src = \"about:blank\";\n    this._panZoom.reset();\n  }\n\n  _nextLoadPromise() {\n    return new Promise(resolve => {\n      var onload = _ => {\n        this._svgFrame.removeEventListener('load', onload);\n        resolve();\n      }\n      this._svgFrame.addEventListener('load', onload);\n    });\n  }\n}\n\nmodule.exports = SvgOutput;\n","var utils = require('../utils');\n\nclass Toast {\n  constructor(message, duration, buttons) {\n    this.container = utils.strToEl(\n      '<div class=\"toast\"><div class=\"toast-content\"></div></div>' +\n    '');\n\n    this._content = this.container.querySelector('.toast-content');\n    this._content.textContent = message;\n    this._answerResolve;\n    this._hideTimeout;\n\n    this.answer = new Promise(r => this._answerResolve = r);\n\n    buttons.forEach(button => {\n      var buttonEl = document.createElement('button');\n      buttonEl.className = 'unbutton';\n      buttonEl.textContent = button;\n      buttonEl.addEventListener('click', event => {\n        this._answerResolve(button);\n      });\n      this.container.appendChild(buttonEl);\n    });\n\n    if (duration) {\n      this._hideTimeout = setTimeout(_ => this.hide(), duration);\n    }\n  }\n\n  hide() {\n    clearTimeout(this._hideTimeout);\n    this._answerResolve();\n    return utils.transitionToClass(this.container, 'hide');\n  }\n}\n\nclass Toasts {\n  constructor() {\n    this.container = utils.strToEl(\"<div class='toasts'></div>\");\n  }\n\n  show(message, {\n    duration = 0,\n    buttons = ['dismiss']\n  }={}) {\n    var toast = new Toast(message, duration, buttons);\n    this.container.appendChild(toast.container);\n\n    toast.answer.then(_ => toast.hide()).then(_ => {\n      this.container.removeChild(toast.container);\n    });\n\n    return toast;\n  }\n}\n\nmodule.exports = Toasts;","var utils = require('../utils');\n\nclass ViewToggler extends (require('events').EventEmitter) {\n  constructor() {\n    super();\n    this.container = null;\n\n    utils.domReady.then(_ => {\n      this.container = document.querySelector('.view-toggler');\n\n      // stop browsers remembering previous form state\n      this.container.output[0].checked = true;\n\n      this.container.addEventListener('change', e => this._onChange(e));\n    });\n  }\n\n  _onChange(event) {\n    var value = this.container.output.value;\n\n    if (!value) { // some browsers don't support the nice shortcut above (eg Safari)\n      value = utils.toArray(this.container.output).reduce((value, input) => {\n        return value || (input.checked ? input.value : '');\n      }, '');\n    }\n\n    this.emit(\"change\", {\n      value: value\n    });\n  }\n}\n\nmodule.exports = ViewToggler;","\"use strict\";\n\nexports.toArray = function toArray(obj) {\n  return Array.prototype.slice.apply(obj);\n};\n\nexports.domReady = new Promise(function(resolve) {\n  function checkState() {\n    if (document.readyState != 'loading') {\n      resolve();\n    }\n  }\n  document.addEventListener('readystatechange', checkState);\n  checkState();\n});\n\nexports.get = function get(url) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open('GET', url);\n\n    req.onload = function() {\n      if (req.status == 200) {\n        resolve(req.response);\n      }\n      else {\n        reject(Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(Error(\"Network Error\"));\n    };\n\n    req.send();\n  });\n};\n\nexports.strToEl = (function () {\n  var tmpEl = document.createElement('div');\n  return function (str) {\n    var r;\n    tmpEl.innerHTML = str;\n    r = tmpEl.children[0];\n    while (tmpEl.firstChild) {\n      tmpEl.removeChild(tmpEl.firstChild);\n    }\n    return r;\n  };\n}());\n\nvar entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  \"/\": '&#x2F;'\n};\n\nexports.escapeHtml = function escapeHTML(string) {\n  return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n    return entityMap[s];\n  });\n};\n\nexports.escapeHtmlTag = function(strings, ...values) {\n  values = values.map(exports.escapeHtml);\n  return strings.reduce((str, val, i) => str += val + (values[i] || ''), '');\n};\n\nexports.readFileAsText = function readFileAsText(file) {\n  return new Promise(function(resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsText(file);\n    reader.onerror = function() {\n      reject(reader.error);\n    };\n    reader.onload = function() {\n      resolve(reader.result);\n    };\n  });\n}\n\nfunction transitionClassFunc({removeClass = false}={}) {\n  return function(el, className = 'active', transitionClass = 'transition') {\n    if (removeClass) {\n      if (!el.classList.contains(className)) return Promise.resolve();\n    }\n    else {\n      if (el.classList.contains(className)) return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      var listener = event => {\n        if (event.target != el) return;\n        el.removeEventListener('webkitTransitionEnd', listener);\n        el.removeEventListener('transitionend', listener);\n        el.classList.remove(transitionClass);\n        resolve();\n      };\n\n      el.classList.add(transitionClass);\n\n      requestAnimationFrame(_ => {\n        el.addEventListener('webkitTransitionEnd', listener);\n        el.addEventListener('transitionend', listener);\n        el.classList[removeClass ? 'remove' : 'add'](className);\n      });\n    });\n  }\n}\n\nexports.transitionToClass = transitionClassFunc();\nexports.transitionFromClass = transitionClassFunc({removeClass: true});\n\nexports.closest = function(el, selector) {\n  if (el.closest) {\n    return el.closest(selector);\n  }\n\n  var matches = el.matches || el.msMatchesSelector;\n\n  do {\n    if (el.nodeType != 1) continue;\n    if (matches.call(el, selector)) return el;\n  } while (el = el.parentNode);\n\n  return undefined;\n};\n\n// I hate that I have to do this\nexports.isIe = (navigator.userAgent.indexOf('Trident/') !== -1);\n\nexports.loadCss = function(url) {\n  return new Promise((resolve, reject) => {\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = url;\n\n    link.addEventListener('load', _ => resolve());\n    link.addEventListener('error', _ => reject());\n\n    document.head.appendChild(link);\n  });\n};\n\nexports.trackFocusMethod = function() {\n  var focusMethod = 'mouse';\n\n  document.body.addEventListener('focus', event => {\n    event.target.classList.add(focusMethod == 'key' ? 'key-focused' : 'mouse-focused');\n  }, true);\n\n  document.body.addEventListener('blur', event => {\n    event.target.classList.remove('key-focused');\n    event.target.classList.remove('mouse-focused');\n  }, true);\n\n  document.body.addEventListener('keydown', event => {\n    focusMethod = 'key';\n  }, true);\n\n  document.body.addEventListener('mousedown', event => {\n    focusMethod = 'mouse';\n  }, true);\n};\n","\"use strict\";\n\nclass WorkerMessenger {\n  constructor(url) {\n    this._requestId = 0;\n    this._worker = new Worker(url);\n\n    // worker jobs awaiting response {callId: [resolve, reject]}\n    this._pending = {};\n\n    this._worker.onmessage = event => this._onMessage(event);\n  }\n\n  _onMessage(event) {\n    if (!event.data.id) {\n      console.log(\"Unexpected message\", event);\n      return;\n    }\n\n    var resolver = this._pending[event.data.id];\n\n    if (!resolver) {\n      console.log(\"No resolver for\", event);\n      return;\n    }\n\n    delete this._pending[event.data.id];\n\n    if (event.data.error) {\n      resolver[1](new Error(event.data.error));\n      return;\n    }\n\n    resolver[0](event.data.result);\n  }\n\n  _requestResponse(message) {\n    var workerMessenger = this;\n    var requestId = ++this._requestId;\n    message.id = requestId;\n\n    return new Promise(function(resolve, reject) {\n      workerMessenger._pending[requestId] = [resolve, reject];\n      workerMessenger._worker.postMessage(message);\n    });\n  }\n}\n\nmodule.exports = WorkerMessenger;","'use strict';\n\nfunction promisifyRequest(obj) {\n  return new Promise(function(resolve, reject) {\n    function onsuccess(event) {\n      resolve(obj.result);\n      unlisten();\n    }\n    function onerror(event) {\n      reject(obj.error);\n      unlisten();\n    }\n    function unlisten() {\n      obj.removeEventListener('complete', onsuccess);\n      obj.removeEventListener('success', onsuccess);\n      obj.removeEventListener('error', onerror);\n      obj.removeEventListener('abort', onerror);\n    }\n    obj.addEventListener('complete', onsuccess);\n    obj.addEventListener('success', onsuccess);\n    obj.addEventListener('error', onerror);\n    obj.addEventListener('abort', onerror);\n  });\n}\n\nclass IndexedDouchebag {\n  constructor(name, version, upgradeCallback) {\n    var request = indexedDB.open(name, version);\n    this.ready = promisifyRequest(request);\n    request.onupgradeneeded = function(event) {\n      upgradeCallback(request.result, event.oldVersion);\n    };\n  }\n\n  transaction(stores, modeOrCallback, callback) {\n    return this.ready.then(function(db) {\n      var mode = 'readonly';\n\n      if (modeOrCallback.apply) {\n        callback = modeOrCallback;\n      }\n      else if (modeOrCallback) {\n        mode = modeOrCallback;\n      }\n\n      var tx = db.transaction(stores, mode);\n      var val = callback(tx, db);\n      var promise = promisifyRequest(tx);\n      var readPromise;\n\n      if (!val) {\n        return promise;\n      }\n\n      if (val[0] && 'result' in val[0]) {\n        readPromise = Promise.all(val.map(promisifyRequest));\n      }\n      else {\n        readPromise = promisifyRequest(val);\n      }\n\n      return promise.then(function() {\n        return readPromise;\n      });\n    });\n  };\n\n  get(store, key) {\n    return this.transaction(store, function(tx) {\n      return tx.objectStore(store).get(key);\n    });\n  };\n\n  put(store, key, value) {\n    return this.transaction(store, 'readwrite', function(tx) {\n      tx.objectStore(store).put(value, key);\n    });\n  };\n\n  delete(store, key) {\n    return this.transaction(store, 'readwrite', function(tx) {\n      tx.objectStore(store).delete(key);\n    });\n  };\n}\n\nmodule.exports = IndexedDouchebag;","var Idb = require('./indexeddouchbag');\nvar idb;\n\n// avoid opening idb until first call\nfunction getIdb() {\n  if (!idb) {\n    idb = new Idb('svgo-keyval', 1, function(db) {\n      db.createObjectStore('keyval');\n    });\n  }\n  return idb;\n}\n\nif (self.indexedDB) {\n  module.exports = {\n    get: key => getIdb().get('keyval', key),\n    set: (key, val) => getIdb().put('keyval', key, val),\n    delete: key => getIdb().delete('keyval', key)\n  };\n}\nelse {\n  module.exports = {\n    get: key => Promise.resolve(localStorage.getItem(key)),\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\n    delete: key => Promise.resolve(localStorage.removeItem(key))\n  };\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}